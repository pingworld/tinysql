.PHONY: all parser clean

ARCH:="`uname -s`"
MAC:="Darwin"
LINUX:="Linux"

#
# 整体过程
# 1. 生成bin/goyacc
# 2. 生成parser.go
#

# 最终的产出，这个文件会被连接到TiDB中，用于解析SQL，其中最关键的这个函数：yyParse
all: parser.go

test: parser.go
	sh test.sh

# 产出的依赖以及执行命令
parser.go: parser.y
	make parser

# SQL语法解析器
parser: bin/goyacc
	# 调用goyacc处理paser.y文件
	bin/goyacc -o /dev/null parser.y
	# 调用goyacc处理paser.y文件并输出parser.go文件并报告错误信息
	bin/goyacc -o parser.go parser.y 2>&1 | egrep "(shift|reduce)/reduce" | awk '{print} END {if (NR > 0) {print "Find conflict in parser.y. Please check y.output for more information."; exit 1;}}'
	# 清理
	rm -f y.output

	@if [ $(ARCH) = $(LINUX) ]; \
	then \
		sed -i -e 's|//line.*||' -e 's/yyEofCode/yyEOFCode/' parser.go; \
	elif [ $(ARCH) = $(MAC) ]; \
	then \
		/usr/bin/sed -i "" 's|//line.*||' parser.go; \
		/usr/bin/sed -i "" 's/yyEofCode/yyEOFCode/' parser.go; \
	fi

	# 为生成的文件加上`DO NOT EDIT`注释
	@awk 'BEGIN{print "// Code generated by goyacc DO NOT EDIT."} {print $0}' parser.go > tmp_parser.go && mv tmp_parser.go parser.go;

# 构建goyacc
bin/goyacc: goyacc/main.go
	GO111MODULE=on go build -o bin/goyacc goyacc/main.go

clean:
	go clean -i ./...
	rm -rf *.out
	rm parser.go
